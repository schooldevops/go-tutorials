# Go Modules with Private GIT Repository 

from: https://medium.com/swlh/go-modules-with-private-git-repository-3940b6835727

- 이번 아티클에서 go module 의 기본적인 사용에 대해서 논의하고, 어떻게 go module 을 생성하고, secured go module 을 포함하는지 알아보자. 
- 우리의 메인 포커스는 git repository 에 중점을 둔다. 

- 모듈들은 코드 관리를 매우 향상시켜주는 역할을 한다. 
- go Lang 에서 의존성 관리는 Java 어플리케이션에서 Maven과 같이 사용할 수 있도록 해준다. 
- 만약 모듈을 새로 성한다면 공식 문서를 참조하자. https://github.com/golang/go/wiki/Modules#go-111-modules

## Create your own go module

- Java에서 아티팩트 관리는 Nexus등과 같은 리포지토리에서 수행한다. 
- 유사하게 go module 은 Git 혹은 BitBucket에서 호스트 될 수 있다. 
- 여기서는 github에서 호스팅 해 볼 것이다. 

- 모든 환경 관련 사항은 GoLang에 맞게 설정되어야 한다. 그렇지 않다면 예상대로 동작하지 않는다. 

- 디렉토리를 이동하고 common-module 폴더를 생성한다. 

```py
mkdir common-module
cd common-module
```

- 프로젝트에서 Go module을 이름으로 초기화 한다. 여기서 이름은 다음과 같다. 

'''<hosting-site>/<repository>/<module>'''

- hosting-site: github.com 이다. 
- repository: -myrepo 으로 설정한다. 
- module: -common-module 이다.

- go module 이름은 "github.com/ereshzealous/common-moddule" 이다. 

```py
go mod init github.com/ereshzealous/common-module
```

- 이제 공통 패키지를 생성하자 그리고 simple go file 을 작성한다. 몇가지 샘플 함수는 다음과 같다. 

```go
package common

// GetCommonData a method
func GetCommonData() string {
	return "Common Data"
}

func GetData() string {
	return "Data"
}
```

- 이제 go module 을 GitHub 태깅에 버젼을 추가하고 릴리즈 하자. 
- 아래 강조 표시된 것을 클릭하면 GIT 커밋이 공개 된다. 
- GIT 리포지토리를 해제하는 방법을 알아보려면 여기를 클릭하라. (https://help.github.com/en/github/administering-a-repository/managing-releases-in-a-repository)

![click](https://miro.medium.com/max/700/1*L0t5XWKmlLARjf9DUBygOw.png)

- 만약 go 파일에서 이 모듈을 임포트 한다면 함수들이 보인다 왜냐하면 리포지토리는 아직 제약이 없기 때문이다. 
- 이제 리포지토리로 이동하여 public을 private로 바꾸자. 

## Developer Environment 

- 이제 go get 커맨드를 이용하여 공통 모듈을 가져와 보자. 
- 아마도 410 Gone 에러 메시지를 확인할 수 있을 것이다. 

![410](https://miro.medium.com/max/700/1*qE36t-fo8QDZSR0U7HBYbA.png)

- 위 이슈를 수정하기 위해서 여러분의 go 어플리케이션에서 private 모듈을 2가지 스텝을 통해서 수행할 수 있다. 

1. By Passing Go Mod proxy site 

- Go Module proxy 사이트의 이러한 이유로 Maven과 같이 기본 리포지토리처럼, go 역시 proxy 사이트를 가진다. (https://proxy.golang.org.direct) 이다. 

- 그러나 우리는 git hub 게시했으므로 프아이빗 리포지토리에 대한 프록시 사이트를 우회하는 메커니즘을 제공해야한다. 
- 이는 GOPRIVATE 를 이용하여 달성할 수 있다. 

- 새로운 GOPRIVATE 환경 변수는 공개적으로 사용할 수 없는 모듈 경로를 나타낸다. 
- 프록시를 통해 가져오고 체크섬 데이터베이스를 사용하여 확인되는 모듈에 대한 세부적인 제어를 제공하는 하위 수준 GONOPROXY 및 GONOSUMDB 변수의 기본값으로 사용된다. 

- GOPRIVATE 설정을 개발 환경에서 수행하기 위해서는 아래와 같이 한다. 
- 복수개의 변수들은 comma 에 의해서 분리된다. 
- 아래에서 내 계정 수준으로 설정했으며 github.com/ereshzealous/common-module과 같은 저장소 수준으로 설정할 수도 있습니다.

```py
go env -w GOPRIVATE=github.com/ereshzealous
```

2. Passing repository credentials to Go module during the build

- Github 을 이용할때 빌드 동이나 auth token을 제공해야한다. 
- 개발 환경에서 이는 직관적이다. 
- 이를 위해서 git 명령이 있다. 즉, gitconfig 파일에 항목을 추가한다. 빌드 프로세스 중에 자격 증명이 평가되도록 형식이 지정된 URL을 전달해야한다. 

- 노트: Auth token 은 반드시 URL 인코드가 되어야한다. 

- 여기에서 GitHub 엑세스 토큰으로 이동하자. (https://github.com/settings/tokens)
- 적합한 퍼미션을 생성하고, 새로운 토큰을 생성하거나 혹은 존재하는 것을 선택한다. 

![permission](https://miro.medium.com/max/700/1*1LMJT_79KIb16n60WPo54A.png)

- 이후 다음 커맨드를 통해서 토큰을 생성하자. 

### Github

```py
git config --global url."https://${username}:${access_token}@github.com".insteadOf /
"https://github.com"
```

### Bitbucket

```py
git config --global url."https://${bitbucket_user_id}:${bitbucket_access_token}@privatebitbucket.com".insteadOf 
  "https://privateaccount.com"
```

- gitconfig 에서 설정이후에 go module 을 다시 가져와보자. 

![go_mod](https://miro.medium.com/max/700/1*gnsWb8MZwy9PJrDgjpsqBw.png)

- 이것은 개발 환경에서 작동하며 CI/CD 또는 도커 컨테이너화는 어떤가?

## Docker

- 다행히 Docker file 에서 이 작업을 수행할 수 있다. 

```py

# Start from the latest golang base image
FROM golang:alpine

RUN GOCACHE=OFF

RUN go env -w GOPRIVATE=github.com/ereshzealous


# Set the Current Working Directory inside the container
WORKDIR /app

# Copy everything from the current directory to the Working Directory inside the container
COPY . .

RUN apk add git

RUN git config --global url."https://golang:<access-token>@github.com".insteadOf "https://github.com"

# Build the Go app
RUN go build -o main .

# Expose port 8080 to the outside world
EXPOSE 8080

#ENTRYPOINT ["/app"]

# Command to run the executable
CMD ["./main"]
```

- Line 6: GOPRIVATE 를 리포지토리로 세팅한다. 
- Line 17: gitconfig는 액세스 토큰과 사용자 이름으로 설정된다. 이렇게 하면 자격 증명이 Go Mod에 전달된다. 이를 위해 docker에 git이미지가 있다. 

- 이제 docker execution의 콘솔을 확인하자.

![docker](https://miro.medium.com/max/700/1*4DD2qhOsr8XXzFCcffJ3jA.png)

